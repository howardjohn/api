// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: networking/v1alpha3/k8s_http_route.proto

// $schema: istio.networking.v1alpha3.KubernetesHTTPRoute
// $title: Kubernetes HTTPRoute
// $description: Alpha
// $location: https://istio.io/docs/reference/config/networking/kubernetes-httproute.html

package v1alpha3

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// KubernetesHTTPRoute defines the Kubernetes HTTPRoute API
//
// <!-- go code generation tags
// +kubetype-gen
// +kubetype-gen:groupVersion=networking.istio.io/v1alpha3
// +genclient
// +k8s:deepcopy-gen=true
// -->
type KubernetesHTTPRoute struct {
	Host                 string                     `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Rules                []*KubernetesHTTPRouteRule `protobuf:"bytes,2,rep,name=rules,proto3" json:"rules,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *KubernetesHTTPRoute) Reset()         { *m = KubernetesHTTPRoute{} }
func (m *KubernetesHTTPRoute) String() string { return proto.CompactTextString(m) }
func (*KubernetesHTTPRoute) ProtoMessage()    {}
func (*KubernetesHTTPRoute) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f13c9dd6385d20c, []int{0}
}
func (m *KubernetesHTTPRoute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KubernetesHTTPRoute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KubernetesHTTPRoute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KubernetesHTTPRoute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KubernetesHTTPRoute.Merge(m, src)
}
func (m *KubernetesHTTPRoute) XXX_Size() int {
	return m.Size()
}
func (m *KubernetesHTTPRoute) XXX_DiscardUnknown() {
	xxx_messageInfo_KubernetesHTTPRoute.DiscardUnknown(m)
}

var xxx_messageInfo_KubernetesHTTPRoute proto.InternalMessageInfo

func (m *KubernetesHTTPRoute) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *KubernetesHTTPRoute) GetRules() []*KubernetesHTTPRouteRule {
	if m != nil {
		return m.Rules
	}
	return nil
}

type KubernetesHTTPRouteRule struct {
	Path                 string                            `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Backend              *KubernetesHTTPRouteActionBackend `protobuf:"bytes,2,opt,name=backend,proto3" json:"backend,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *KubernetesHTTPRouteRule) Reset()         { *m = KubernetesHTTPRouteRule{} }
func (m *KubernetesHTTPRouteRule) String() string { return proto.CompactTextString(m) }
func (*KubernetesHTTPRouteRule) ProtoMessage()    {}
func (*KubernetesHTTPRouteRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f13c9dd6385d20c, []int{1}
}
func (m *KubernetesHTTPRouteRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KubernetesHTTPRouteRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KubernetesHTTPRouteRule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KubernetesHTTPRouteRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KubernetesHTTPRouteRule.Merge(m, src)
}
func (m *KubernetesHTTPRouteRule) XXX_Size() int {
	return m.Size()
}
func (m *KubernetesHTTPRouteRule) XXX_DiscardUnknown() {
	xxx_messageInfo_KubernetesHTTPRouteRule.DiscardUnknown(m)
}

var xxx_messageInfo_KubernetesHTTPRouteRule proto.InternalMessageInfo

func (m *KubernetesHTTPRouteRule) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *KubernetesHTTPRouteRule) GetBackend() *KubernetesHTTPRouteActionBackend {
	if m != nil {
		return m.Backend
	}
	return nil
}

type KubernetesHTTPRouteActionBackend struct {
	Service              string   `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	Port                 int32    `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KubernetesHTTPRouteActionBackend) Reset()         { *m = KubernetesHTTPRouteActionBackend{} }
func (m *KubernetesHTTPRouteActionBackend) String() string { return proto.CompactTextString(m) }
func (*KubernetesHTTPRouteActionBackend) ProtoMessage()    {}
func (*KubernetesHTTPRouteActionBackend) Descriptor() ([]byte, []int) {
	return fileDescriptor_4f13c9dd6385d20c, []int{2}
}
func (m *KubernetesHTTPRouteActionBackend) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KubernetesHTTPRouteActionBackend) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KubernetesHTTPRouteActionBackend.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KubernetesHTTPRouteActionBackend) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KubernetesHTTPRouteActionBackend.Merge(m, src)
}
func (m *KubernetesHTTPRouteActionBackend) XXX_Size() int {
	return m.Size()
}
func (m *KubernetesHTTPRouteActionBackend) XXX_DiscardUnknown() {
	xxx_messageInfo_KubernetesHTTPRouteActionBackend.DiscardUnknown(m)
}

var xxx_messageInfo_KubernetesHTTPRouteActionBackend proto.InternalMessageInfo

func (m *KubernetesHTTPRouteActionBackend) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

func (m *KubernetesHTTPRouteActionBackend) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func init() {
	proto.RegisterType((*KubernetesHTTPRoute)(nil), "istio.networking.v1alpha3.KubernetesHTTPRoute")
	proto.RegisterType((*KubernetesHTTPRouteRule)(nil), "istio.networking.v1alpha3.KubernetesHTTPRouteRule")
	proto.RegisterType((*KubernetesHTTPRouteActionBackend)(nil), "istio.networking.v1alpha3.KubernetesHTTPRouteActionBackend")
}

func init() {
	proto.RegisterFile("networking/v1alpha3/k8s_http_route.proto", fileDescriptor_4f13c9dd6385d20c)
}

var fileDescriptor_4f13c9dd6385d20c = []byte{
	// 264 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0x31, 0x4b, 0xc4, 0x30,
	0x18, 0x86, 0xc9, 0xe9, 0x79, 0x98, 0xdb, 0xe2, 0x60, 0x5d, 0x4a, 0xe9, 0xd4, 0x29, 0xc5, 0xde,
	0x22, 0x38, 0x79, 0xd3, 0x81, 0xcb, 0x11, 0xce, 0xc5, 0xe5, 0x48, 0xeb, 0x87, 0x0d, 0x2d, 0x49,
	0x48, 0xbe, 0x9e, 0x7f, 0xc0, 0x1f, 0xe7, 0xe8, 0x4f, 0x90, 0xfe, 0x12, 0x69, 0x6a, 0x71, 0xb9,
	0x43, 0xdc, 0xde, 0xc0, 0x9b, 0xe7, 0x7d, 0xe0, 0xa3, 0x99, 0x06, 0x7c, 0x33, 0xae, 0x51, 0xfa,
	0x35, 0x3f, 0xdc, 0xca, 0xd6, 0xd6, 0x72, 0x95, 0x37, 0x77, 0x7e, 0x5f, 0x23, 0xda, 0xbd, 0x33,
	0x1d, 0x02, 0xb7, 0xce, 0xa0, 0x61, 0x37, 0xca, 0xa3, 0x32, 0xfc, 0xb7, 0xcf, 0xa7, 0x7e, 0xea,
	0xe9, 0xd5, 0x63, 0x57, 0x82, 0xd3, 0x80, 0xe0, 0x37, 0xbb, 0xdd, 0x56, 0x0c, 0xff, 0x18, 0xa3,
	0xe7, 0xb5, 0xf1, 0x18, 0x91, 0x84, 0x64, 0x97, 0x22, 0x64, 0xb6, 0xa1, 0x73, 0xd7, 0xb5, 0xe0,
	0xa3, 0x59, 0x72, 0x96, 0x2d, 0x8b, 0x82, 0x9f, 0xa4, 0xf2, 0x23, 0x48, 0xd1, 0xb5, 0x20, 0x46,
	0x40, 0xfa, 0x4e, 0xe8, 0xf5, 0x89, 0xca, 0xb0, 0x6c, 0x25, 0xd6, 0xd3, 0xf2, 0x90, 0xd9, 0x13,
	0x5d, 0x94, 0xb2, 0x6a, 0x40, 0xbf, 0x44, 0xb3, 0x84, 0x64, 0xcb, 0xe2, 0xfe, 0x7f, 0xdb, 0x0f,
	0x15, 0x2a, 0xa3, 0xd7, 0x23, 0x42, 0x4c, 0xac, 0x74, 0x4b, 0x93, 0xbf, 0xca, 0x2c, 0xa2, 0x0b,
	0x0f, 0xee, 0xa0, 0x2a, 0xf8, 0x31, 0x9a, 0x9e, 0x41, 0xd4, 0x38, 0x0c, 0x46, 0x73, 0x11, 0xf2,
	0x9a, 0x7f, 0xf4, 0x31, 0xf9, 0xec, 0x63, 0xf2, 0xd5, 0xc7, 0xe4, 0x39, 0x19, 0x25, 0x95, 0xc9,
	0xa5, 0x55, 0xf9, 0x91, 0x6b, 0x95, 0x17, 0xe1, 0x3e, 0xab, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x5c, 0x51, 0x95, 0x48, 0xcb, 0x01, 0x00, 0x00,
}

func (m *KubernetesHTTPRoute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KubernetesHTTPRoute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KubernetesHTTPRoute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Rules) > 0 {
		for iNdEx := len(m.Rules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintK8SHttpRoute(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Host) > 0 {
		i -= len(m.Host)
		copy(dAtA[i:], m.Host)
		i = encodeVarintK8SHttpRoute(dAtA, i, uint64(len(m.Host)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KubernetesHTTPRouteRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KubernetesHTTPRouteRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KubernetesHTTPRouteRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Backend != nil {
		{
			size, err := m.Backend.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintK8SHttpRoute(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintK8SHttpRoute(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KubernetesHTTPRouteActionBackend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KubernetesHTTPRouteActionBackend) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KubernetesHTTPRouteActionBackend) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Port != 0 {
		i = encodeVarintK8SHttpRoute(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Service) > 0 {
		i -= len(m.Service)
		copy(dAtA[i:], m.Service)
		i = encodeVarintK8SHttpRoute(dAtA, i, uint64(len(m.Service)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintK8SHttpRoute(dAtA []byte, offset int, v uint64) int {
	offset -= sovK8SHttpRoute(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *KubernetesHTTPRoute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovK8SHttpRoute(uint64(l))
	}
	if len(m.Rules) > 0 {
		for _, e := range m.Rules {
			l = e.Size()
			n += 1 + l + sovK8SHttpRoute(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *KubernetesHTTPRouteRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovK8SHttpRoute(uint64(l))
	}
	if m.Backend != nil {
		l = m.Backend.Size()
		n += 1 + l + sovK8SHttpRoute(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *KubernetesHTTPRouteActionBackend) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Service)
	if l > 0 {
		n += 1 + l + sovK8SHttpRoute(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovK8SHttpRoute(uint64(m.Port))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovK8SHttpRoute(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozK8SHttpRoute(x uint64) (n int) {
	return sovK8SHttpRoute(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *KubernetesHTTPRoute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowK8SHttpRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KubernetesHTTPRoute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KubernetesHTTPRoute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowK8SHttpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthK8SHttpRoute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthK8SHttpRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowK8SHttpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthK8SHttpRoute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthK8SHttpRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = append(m.Rules, &KubernetesHTTPRouteRule{})
			if err := m.Rules[len(m.Rules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipK8SHttpRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthK8SHttpRoute
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthK8SHttpRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KubernetesHTTPRouteRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowK8SHttpRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KubernetesHTTPRouteRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KubernetesHTTPRouteRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowK8SHttpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthK8SHttpRoute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthK8SHttpRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Backend", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowK8SHttpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthK8SHttpRoute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthK8SHttpRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Backend == nil {
				m.Backend = &KubernetesHTTPRouteActionBackend{}
			}
			if err := m.Backend.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipK8SHttpRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthK8SHttpRoute
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthK8SHttpRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KubernetesHTTPRouteActionBackend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowK8SHttpRoute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KubernetesHTTPRouteActionBackend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KubernetesHTTPRouteActionBackend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowK8SHttpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthK8SHttpRoute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthK8SHttpRoute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Service = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowK8SHttpRoute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipK8SHttpRoute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthK8SHttpRoute
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthK8SHttpRoute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipK8SHttpRoute(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowK8SHttpRoute
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowK8SHttpRoute
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowK8SHttpRoute
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthK8SHttpRoute
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthK8SHttpRoute
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowK8SHttpRoute
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipK8SHttpRoute(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthK8SHttpRoute
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthK8SHttpRoute = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowK8SHttpRoute   = fmt.Errorf("proto: integer overflow")
)
