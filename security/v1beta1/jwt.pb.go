// Code generated by protoc-gen-go. DO NOT EDIT.
// source: security/v1beta1/jwt.proto

package v1beta1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// JSON Web Token (JWT) token format for authentication as defined by
// [RFC 7519](https://tools.ietf.org/html/rfc7519). See [OAuth 2.0](https://tools.ietf.org/html/rfc6749) and
// [OIDC 1.0](http://openid.net/connect) for how this is used in the whole
// authentication flow.
//
// Examples:
//
// Spec for a JWT that is issued by `https://example.com`, with the audience claims must be either
// `bookstore_android.apps.example.com` or `bookstore_web.apps.example.com`.
// The token should be presented at the `Authorization` header (default). The Json web key set (JWKS)
// will be discovered followwing OpenID Connect protocol.
//
// ```yaml
// issuer: https://example.com
// audiences:
// - bookstore_android.apps.example.com
//   bookstore_web.apps.example.com
// ```
//
// This example specifies token in non-default location (`x-goog-iap-jwt-assertion` header). It also
// defines the URI to fetch JWKS explicitly.
//
// ```yaml
// issuer: https://example.com
// jwksUri: https://example.com/.secret/jwks.json
// jwtHeaders:
// - "x-goog-iap-jwt-assertion"
// ```
type JWTRule struct {
	// Identifies the issuer that issued the JWT. See
	// [issuer](https://tools.ietf.org/html/rfc7519#section-4.1.1)
	// A JWT with different `iss` claim will be rejected.
	//
	// Example: https://foobar.auth0.com
	// Example: 1234567-compute@developer.gserviceaccount.com
	Issuer string `protobuf:"bytes,1,opt,name=issuer,proto3" json:"issuer,omitempty"`
	// The list of JWT
	// [audiences](https://tools.ietf.org/html/rfc7519#section-4.1.3).
	// that are allowed to access. A JWT containing any of these
	// audiences will be accepted.
	//
	// The service name will be accepted if audiences is empty.
	//
	// Example:
	//
	// ```yaml
	// audiences:
	// - bookstore_android.apps.example.com
	//   bookstore_web.apps.example.com
	// ```
	Audiences []string `protobuf:"bytes,2,rep,name=audiences,proto3" json:"audiences,omitempty"`
	// URL of the provider's public key set to validate signature of the
	// JWT. See [OpenID Discovery](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
	//
	// Optional if the key set document can either (a) be retrieved from
	// [OpenID
	// Discovery](https://openid.net/specs/openid-connect-discovery-1_0.html) of
	// the issuer or (b) inferred from the email domain of the issuer (e.g. a
	// Google service account).
	//
	// Example: `https://www.googleapis.com/oauth2/v1/certs`
	//
	// Note: Only one of jwks_uri and jwks should be used. jwks_uri will be ignored if it does.
	JwksUri string `protobuf:"bytes,3,opt,name=jwks_uri,json=jwksUri,proto3" json:"jwks_uri,omitempty"`
	// JSON Web Key Set of public keys to validate signature of the JWT.
	// See https://auth0.com/docs/jwks.
	//
	// Note: Only one of jwks_uri and jwks should be used. jwks_uri will be ignored if it does.
	Jwks string `protobuf:"bytes,10,opt,name=jwks,proto3" json:"jwks,omitempty"`
	// List of header locations from which JWT is expected. For example, below is the location spec
	// if JWT is expected to be found in `x-jwt-assertion` header, and have "Bearer " prefix:
	// ```
	//   fromHeaders:
	//   - name: x-jwt-assertion
	//     prefix: "Bearer "
	// ```
	FromHeaders []*JWTHeader `protobuf:"bytes,6,rep,name=from_headers,json=fromHeaders,proto3" json:"from_headers,omitempty"`
	// List of query parameters from which JWT is expected. For example, if JWT is provided via query
	// parameter `my_token` (e.g /path?my_token=<JWT>), the config is:
	// ```
	//   fromParams:
	//   - "my_token"
	// ```
	FromParams []string `protobuf:"bytes,7,rep,name=from_params,json=fromParams,proto3" json:"from_params,omitempty"`
	// This field specifies the header name to output a successfully verified JWT payload to the
	// backend. The forwarded data is `base64_encoded(jwt_payload_in_JSON)`. If it is not specified,
	// the payload will not be emitted.
	OutputPayloadToHeader string `protobuf:"bytes,8,opt,name=output_payload_to_header,json=outputPayloadToHeader,proto3" json:"output_payload_to_header,omitempty"`
	// If set to true, the orginal token will be kept for the ustream request. Default is false.
	ForwardOriginalToken bool     `protobuf:"varint,9,opt,name=forward_original_token,json=forwardOriginalToken,proto3" json:"forward_original_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JWTRule) Reset()         { *m = JWTRule{} }
func (m *JWTRule) String() string { return proto.CompactTextString(m) }
func (*JWTRule) ProtoMessage()    {}
func (*JWTRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_163ab6fd32fb6b15, []int{0}
}

func (m *JWTRule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JWTRule.Unmarshal(m, b)
}
func (m *JWTRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JWTRule.Marshal(b, m, deterministic)
}
func (m *JWTRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JWTRule.Merge(m, src)
}
func (m *JWTRule) XXX_Size() int {
	return xxx_messageInfo_JWTRule.Size(m)
}
func (m *JWTRule) XXX_DiscardUnknown() {
	xxx_messageInfo_JWTRule.DiscardUnknown(m)
}

var xxx_messageInfo_JWTRule proto.InternalMessageInfo

func (m *JWTRule) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *JWTRule) GetAudiences() []string {
	if m != nil {
		return m.Audiences
	}
	return nil
}

func (m *JWTRule) GetJwksUri() string {
	if m != nil {
		return m.JwksUri
	}
	return ""
}

func (m *JWTRule) GetJwks() string {
	if m != nil {
		return m.Jwks
	}
	return ""
}

func (m *JWTRule) GetFromHeaders() []*JWTHeader {
	if m != nil {
		return m.FromHeaders
	}
	return nil
}

func (m *JWTRule) GetFromParams() []string {
	if m != nil {
		return m.FromParams
	}
	return nil
}

func (m *JWTRule) GetOutputPayloadToHeader() string {
	if m != nil {
		return m.OutputPayloadToHeader
	}
	return ""
}

func (m *JWTRule) GetForwardOriginalToken() bool {
	if m != nil {
		return m.ForwardOriginalToken
	}
	return false
}

// This message specifies a header location to extract JWT token.
type JWTHeader struct {
	// The HTTP header name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The prefix that should be stripped before decoding the token.
	// For example, for "Authorization: Bearer <token>", prefix="Bearer " with a space at the end.
	// If the header doesn't have this exact prefix, it is considerred invalid.
	Prefix               string   `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JWTHeader) Reset()         { *m = JWTHeader{} }
func (m *JWTHeader) String() string { return proto.CompactTextString(m) }
func (*JWTHeader) ProtoMessage()    {}
func (*JWTHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_163ab6fd32fb6b15, []int{1}
}

func (m *JWTHeader) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JWTHeader.Unmarshal(m, b)
}
func (m *JWTHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JWTHeader.Marshal(b, m, deterministic)
}
func (m *JWTHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JWTHeader.Merge(m, src)
}
func (m *JWTHeader) XXX_Size() int {
	return xxx_messageInfo_JWTHeader.Size(m)
}
func (m *JWTHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_JWTHeader.DiscardUnknown(m)
}

var xxx_messageInfo_JWTHeader proto.InternalMessageInfo

func (m *JWTHeader) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *JWTHeader) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func init() {
	proto.RegisterType((*JWTRule)(nil), "istio.security.v1beta1.JWTRule")
	proto.RegisterType((*JWTHeader)(nil), "istio.security.v1beta1.JWTHeader")
}

func init() {
	proto.RegisterFile("security/v1beta1/jwt.proto", fileDescriptor_163ab6fd32fb6b15)
}

var fileDescriptor_163ab6fd32fb6b15 = []byte{
	// 356 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xc1, 0x4e, 0xfa, 0x40,
	0x10, 0xc6, 0xd3, 0x42, 0x0a, 0x5d, 0xfe, 0xa7, 0xcd, 0x5f, 0xb2, 0x12, 0x0c, 0x95, 0x53, 0x4f,
	0x6d, 0x50, 0x13, 0x4f, 0x1e, 0x24, 0x1e, 0x0c, 0x17, 0x49, 0x53, 0x43, 0xe2, 0x65, 0xb3, 0xd0,
	0x2d, 0x2c, 0x94, 0x4e, 0xb3, 0xbb, 0x05, 0x79, 0x45, 0x1f, 0xc3, 0x27, 0x31, 0xdd, 0x56, 0x8d,
	0xc6, 0xdb, 0xcc, 0xef, 0x9b, 0x69, 0xbf, 0xd9, 0x0f, 0x0d, 0x14, 0x5f, 0x95, 0x52, 0xe8, 0x53,
	0x78, 0x98, 0x2c, 0xb9, 0x66, 0x93, 0x70, 0x7b, 0xd4, 0x41, 0x21, 0x41, 0x03, 0xee, 0x0b, 0xa5,
	0x05, 0x04, 0x9f, 0x13, 0x41, 0x33, 0x31, 0x18, 0xad, 0x01, 0xd6, 0x19, 0x0f, 0x59, 0x21, 0xc2,
	0x54, 0xf0, 0x2c, 0xa1, 0x4b, 0xbe, 0x61, 0x07, 0x01, 0xb2, 0x5e, 0x1c, 0xbf, 0xd9, 0xa8, 0x33,
	0x5b, 0xc4, 0x51, 0x99, 0x71, 0x3c, 0x44, 0x8e, 0x50, 0xaa, 0xe4, 0x92, 0x58, 0x9e, 0xe5, 0xbb,
	0xd3, 0xf6, 0xfb, 0xbd, 0x65, 0x47, 0x0d, 0xc3, 0x43, 0xe4, 0xb2, 0x32, 0x11, 0x3c, 0x5f, 0x71,
	0x45, 0x6c, 0xaf, 0xe5, 0xbb, 0xd1, 0x37, 0xc0, 0xe7, 0xa8, 0xbb, 0x3d, 0xee, 0x14, 0x2d, 0xa5,
	0x20, 0xad, 0x6a, 0x3b, 0xea, 0x54, 0xfd, 0xb3, 0x14, 0x18, 0xa3, 0x76, 0x55, 0x12, 0x64, 0xb0,
	0xa9, 0xf1, 0x03, 0xfa, 0x97, 0x4a, 0xd8, 0xd3, 0x0d, 0x67, 0x09, 0x97, 0x8a, 0x38, 0x5e, 0xcb,
	0xef, 0x5d, 0x5d, 0x06, 0x7f, 0x9f, 0x11, 0xcc, 0x16, 0xf1, 0xa3, 0x99, 0x8c, 0x7a, 0xd5, 0x5a,
	0x5d, 0x2b, 0x3c, 0x42, 0xa6, 0xa5, 0x05, 0x93, 0x6c, 0xaf, 0x48, 0xc7, 0x98, 0x42, 0x15, 0x9a,
	0x1b, 0x82, 0x6f, 0x11, 0x81, 0x52, 0x17, 0xa5, 0xa6, 0x05, 0x3b, 0x65, 0xc0, 0x12, 0xaa, 0xa1,
	0xf9, 0x27, 0xe9, 0x1a, 0x3b, 0x67, 0xb5, 0x3e, 0xaf, 0xe5, 0x18, 0xea, 0x4f, 0xe3, 0x1b, 0xd4,
	0x4f, 0x41, 0x1e, 0x99, 0x4c, 0x28, 0x48, 0xb1, 0x16, 0x39, 0xcb, 0xa8, 0x86, 0x1d, 0xcf, 0x89,
	0xeb, 0x59, 0x7e, 0x37, 0xfa, 0xdf, 0xa8, 0x4f, 0x8d, 0x18, 0x57, 0xda, 0xf8, 0x0e, 0xb9, 0x5f,
	0x4e, 0x31, 0x41, 0xed, 0x9c, 0xed, 0xf9, 0x8f, 0xb7, 0x34, 0x04, 0xf7, 0x91, 0x53, 0x48, 0x9e,
	0x8a, 0x57, 0x62, 0x1b, 0x0f, 0x4d, 0x37, 0x1d, 0xbd, 0x5c, 0xd4, 0xf7, 0x0b, 0x30, 0x81, 0xfd,
	0xce, 0x7b, 0xe9, 0x98, 0xcc, 0xae, 0x3f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x5d, 0xa5, 0xdd, 0x7f,
	0x0a, 0x02, 0x00, 0x00,
}
